import datetime
import os, random, string, json
from zoneinfo import ZoneInfo
from google.adk.agents import Agent
from google.adk.agents import LlmAgent
from dotenv import load_dotenv
from google.adk import Agent
from google.adk.tools import ToolContext, load_artifacts
from google.genai import Client, types
import asyncio
from .prompt import headshot_agent_instruction

MODEL_IMAGE = "imagen-3.0-generate-002"

load_dotenv()

# Only Vertex AI supports image generation for now.
client = Client(
    vertexai=True,
    project=os.getenv("GOOGLE_CLOUD_PROJECT"),
    location=os.getenv("GOOGLE_CLOUD_LOCATION"),
)


async def generate_image(industry_data: str, tool_context: "ToolContext"):
    img_prompt = f"Generate a headshot for a meeting with a customer who works in {industry_data}. Include an appropriate background with details for the {industry_data} industry. Include a watermark that says 'generated by Picsart'. The watermark should be half way up on the image."
    response = client.models.generate_images(
        model=MODEL_IMAGE,
        prompt=img_prompt,
        config={"number_of_images":1},
    )
    if not response.generated_images:
        return {"status": "failed"}
    image_bytes = response.generated_images[0].image.image_bytes
    original_filename = "image.png"

    # Generate a random 6-character suffix
    suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))

    # Split the filename into name and extension
    name, ext = os.path.splitext(original_filename)

    # New filename with random suffix
    new_filename = f"{name}_{suffix}{ext}"
    await tool_context.save_artifact(
        new_filename,
        types.Part.from_bytes(data=image_bytes, mime_type="image/png"),
    )
        
    return {
        "status": "success",
        "detail": f"Image generated successfully for industry {industry_data} and stored in artifacts.",
        "filename": "image.png",
    }


root_agent = Agent(
    name="headshot_generator_agent",
    model="gemini-2.0-flash",
    description=(
        "I can generate headshots for customer meetings"
    ),
    instruction=headshot_agent_instruction,
    tools=[generate_image, load_artifacts],
)