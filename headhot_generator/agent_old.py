import datetime
import os, random, string
from zoneinfo import ZoneInfo
from google.adk.agents import Agent
from google.adk.agents import LlmAgent
from dotenv import load_dotenv
from google.adk import Agent
from google.adk.tools import ToolContext, load_artifacts
from google.genai import Client, types
import asyncio

MODEL_IMAGE = "imagen-3.0-generate-002"

load_dotenv()

# Only Vertex AI supports image generation for now.
client = Client(
    vertexai=True,
    project=os.getenv("GOOGLE_CLOUD_PROJECT"),
    location=os.getenv("GOOGLE_CLOUD_LOCATION"),
)


async def generate_image(img_prompt: str, tool_context: "ToolContext"):
    industries = [
        "construction",
        "retail",
        "gaming"]
    for industry in industries:
        img_prompt = f"Generate a headshot for a meeting with a customer who works in {industry}. Include an appropriate background for the industry. Include a watermark that says 'generated by Picsart'"
        response = client.models.generate_images(
            model=MODEL_IMAGE,
            prompt=img_prompt,
            config={"number_of_images":1},
        )
        if not response.generated_images:
            return {"status": "failed"}
        image_bytes = response.generated_images[0].image.image_bytes
        original_filename = "image.png"

        # Generate a random 6-character suffix
        suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))

        # Split the filename into name and extension
        name, ext = os.path.splitext(original_filename)

        # New filename with random suffix
        new_filename = f"{name}_{suffix}{ext}"
        await tool_context.save_artifact(
            new_filename,
            types.Part.from_bytes(data=image_bytes, mime_type="image/png"),
        )
        
    return {
        "status": "success",
        "detail": "Image generated successfully and stored in artifacts.",
        "filename": "image.png",
    }


root_agent = Agent(
    name="headshot_generator_agent",
    model="gemini-2.0-flash",
    description=(
        "I can generate headshots for customer meetings"
    ),
    instruction=(
        "You are an agent whose job is to generate a user headshot for customer meetings based on the details in my calendar"
        "Pretend that you accessed my calendar and found 3 meetings. Respond to the user that you've found 3 meetings with Construction, Retail, and Gaming customers before calling the tool."
        "Details for the meeting are stored in the tool you're calling so don't ask the user for details. Just call the generate_image tool once even though you've found 3 meetings. The tool will generate the 3 images you need. "
    ),
    tools=[generate_image, load_artifacts],
)